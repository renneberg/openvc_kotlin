import org.jetbrains.kotlin.com.intellij.openapi.vfs.StandardFileSystems.jar
import org.jetbrains.kotlin.gradle.targets.js.npm.importedPackageDir

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.6.21"

    // Apply the java-library plugin for API and implementation separation.
    `java-library`
}




repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal()
    jcenter()
    google()

    maven{
       url =  uri("https://oss.sonatype.org/content/repositories/snapshots/")
        name = ("OSS-Sonatype")
    }

    maven { url = uri("https://oss.sonatype.org/content/groups/public/") }
    maven { url = uri("https://maven.pkg.jetbrains.space/public/p/ktor/eap") }
    maven { url = uri("https://storage.googleapis.com/r8-releases/raw")}
    maven { url = uri("https://ci.android.com/builds/submitted/6217200/androidx_snapshot/latest/repository/") }

}

version = "0.1.0"

tasks.jar {
    manifest {
        attributes(
            mapOf(
                "Implementation-Title" to "OpenVC_Library",
            "Implementation-Version" to project.version,
                "Main-Class" to "library.Main"
            )
        )
    }
    from(sourceSets.main.get().output)
    dependsOn(configurations.runtimeClasspath)

    from({
        configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") || it.name.endsWith("so" ) }.map { zipTree(it) }
    })
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}




java {
    withSourcesJar()
    withJavadocJar()

}



//  mvn install:install-file -Dfile=opencv-460.jar -DgroupId=de.zermos -DartifactId=openvc -Dversion=0.0.1 -Dpackaging=jar


dependencies {

    implementation("de.zermos:openvc:4.6.0")
 
 
// https://mvnrepository.com/artifact/org.openpnp/opencv
 // implementation("org.openpnp:opencv:4.6.0-0")

  //  implementation(files("opencv-460"))
    // implementation(files("libopencv_java460.so"))

// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation("org.slf4j:slf4j-api:1.7.7")
    implementation("org.slf4j:slf4j-log4j12:1.7.7")

    implementation("org.json:json:20220320")
// https://mvnrepository.com/artifact/org.tensorflow/tensorflow
    implementation ("org.tensorflow:tensorflow:1.15.0")






   implementation("com.google.code.gson:gson:2.8.9")

    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.guava:guava:31.0.1-jre")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("org.apache.commons:commons-math3:3.6.1")


}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest()
        }
    }
}
